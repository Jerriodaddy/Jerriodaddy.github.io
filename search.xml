<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Authentication and Authorization: Spring Security + OAuth2</title>
    <url>/2021/04/27/authentication-and-authorization/</url>
    <content><![CDATA[<!-- Generally speaking, application access security is developed around the two core concepts of **Authentication** and **Authorization**. You first need to determine the identity of the user, and determine whether the user has the authority to access the specified resource...
more -->
<p>Generally speaking, application access security is developed around the two core concepts of <strong>Authentication</strong> and <strong>Authorization</strong>. You first need to determine the identity of the user, and determine whether the user has the authority to access the specified resource. There are many solutions for authentication, the mainstream ones are <code>CAS</code>, <code>SAML2</code>, <code>OAUTH2</code>, etc. The single sign-on (SSO) solution we often talk about refer to this. The mainstream authorization architectures are Spring Security and Shiro. <span id="more"></span></p>
<p>Compared with Spring Security, Shiro is said to be relatively lighter, but I have not felt much difference in usage for the time being. Recently, I mainly pick Spring Security when choosing framework, because it makes me feel good to collect a set of "Spring". 一家人就要整整齐齐:)</p>
<h2 id="what-is-oauth2">What is OAuth2?</h2>
<p>Before we go for Spring Security，let's start with OAuth2. OAuth2 is an open standard for authorization. The core idea is to authenticate users through various authentication methods (what OAuth2 does not care about) and issue tokens so that third-party applications can use the token for a limited time, restricted access to specified resources. The main RFC specifications involved are <code>RFC6749</code> (overall authorization framework), <code>RFC6750</code> (token use), and 1RFC68191 (threat model). Generally, what we need to understand is RFC6749. There are four main ways to obtain a token, which are Authorization Code, Implicit Grant Type, Resource Owner Password Credentials Grant, Client Credentials Grant. More detailed -&gt; <a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a></p>
The following figure is the handshake process of OAuth2 protocol (cite from <a href="https://tools.ietf.org/html/rfc6749"><code>RFC6749</code></a>):
<center>
<img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="oauth2handshake.png"> <br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">
OAuth2 Handshake Process
</div>
</center>
<p><code>Resource Owner</code>: The user who owns the resource being accessed.<br />
<code>User-agent</code>: It generally represents the browser.<br />
<code>Client</code>: Third-party applications.<br />
<code>Authorization Server</code>: used to authenticate users and issue tokens.<br />
<code>Resource Server</code>：the server that owns the resource being accessed, needs to use the token to determine whether it has permission to access.</p>
<h2 id="spring-security">Spring Security</h2>
<p>Spring Security is a set of security frameworks that can control user access rights based on RBAC (role-based access control). The core idea is to intercept and filter through a series of filter chains.</p>
<h3 id="unfinished...">[<em>unfinished...</em>]</h3>
<h2 id="spring-cloud-security">Spring Cloud Security</h2>
<p>The following figure shows the dependencies of Spring Cloud Security (2.2.5.RELEASE). It appears that Spring Cloud Security is a superset of Spring Security. In addition to having all the functions of Spring Security, it has more functions such as health check and load balancing.</p>
<figure>
<img src="spring_cloud_security_dependencies.png" alt="spring_cloud_security_dependencies" /><figcaption aria-hidden="true">spring_cloud_security_dependencies</figcaption>
</figure>
<h2 id="reference-relative-reading">Reference &amp; Relative Reading</h2>
<ol type="1">
<li><p><a href="https://mp.weixin.qq.com/s/nvKKNSJuIrGuHeJkUeO7rw">手把手教你搞定权限管理，结合Spring Security实现接口的动态权限控制！</a></p></li>
<li><p><a href="https://www.jianshu.com/p/cb886f995e86">深入理解Spring Cloud Security OAuth2及JWT</a></p></li>
<li><p><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a></p></li>
<li><p><a href="https://tools.ietf.org/html/rfc6749">RFC6749 - The OAuth 2.0 Authorization Framework</a></p></li>
</ol>
]]></content>
      <categories>
        <category>System Architecture</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>[Algorithms] DP1: FIB-LIS-LCS</title>
    <url>/2022/01/09/Algorithms-DP1-FIB-LIS-LCS/</url>
    <content><![CDATA[<p>Dynamic Programming 是一个很重要的算法思想。</p>
<ul>
<li>No recursion in algorithm</li>
<li>Memorization <span id="more"></span></li>
</ul>
<h2 id="fibonacci-numbers">Fibonacci Numbers</h2>
<p>斐波那契数列：0，1，1，2，3，5，8，13，21，34 ...</p>
<p>我们如何找到第n个斐波那契数呢？</p>
<h3 id="by-recursive-algorithm">by Recursive Algorithm</h3>
<p>让我们来先看看 Recursive Algorithm 的解法 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Fib1(n):</span><br><span class="line">    input: n &gt;&#x3D; 0</span><br><span class="line">    output: F_n</span><br><span class="line">    if n&#x3D;0, return(0)</span><br><span class="line">    if n&#x3D;1, return(1)</span><br><span class="line">    return Fib1(n-1) + Fib1(n-2)</span><br></pre></td></tr></table></figure> <pre class="mermaid">
graph TD
A[n]
B[n-1];C[n-2]
D[n-2];E[n-3];F[n-3];G[n-4]
H[n-3];I[n-4];J[n-4];K[n-5]
A --&gt; B
A --&gt; C
B --&gt; D
B --&gt; E
C --&gt; F
C --&gt; G
D --&gt; H
D --&gt; I
E --&gt; J
E --&gt; K
style G fill:#f9f,stroke:#333,stroke-width:2px
style I fill:#f9f,stroke:#333,stroke-width:2px
style J fill:#f9f,stroke:#333,stroke-width:2px
</pre> 这并不是一个最高效的方法，因为如果要求第n个斐波那契数，它需要计算<span class="math inline">\(n^2\)</span>次。由下图可以看出它还重复计算同一数值多次，这无疑浪费了很多计算资源。让我们来看看DP是如何去解的。</p>
<h3 id="by-dp-algorith">by DP Algorith</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Fib2(n):</span><br><span class="line">    F[0] &#x3D; 1</span><br><span class="line">    F[1] &#x3D; 1</span><br><span class="line">    for i &#x3D; 2 -&gt; n:</span><br><span class="line">        F[i] &#x3D; F[i-1] + F[i-2]</span><br><span class="line">    return F[n]</span><br></pre></td></tr></table></figure>
<p>F = |0|1|1|2|3|5|8|...</p>
<p>DP 的基本思想是用一个 list 储存已经计算过的数，等下次需要的时候直接读取，从而避免了重复计算，大大提升了计算效率。</p>
<h2 id="longest-increasing-subsequence-lis">Longest Increasing Subsequence (LIS)</h2>
<p>Input: n numbers <span class="math inline">\(a_1, a_2, ..., a_n\)</span><br />
Goal: find the length of LIS in the numbers.</p>
<p>Substring 和 Subsequence 区别：</p>
<ul>
<li>Substring: set of consecutive elements<br />
</li>
<li>Subsequence: subset of elements in order (can skip) 比如在 [3,1,8,2,3,9,5,9,2] 中，Increasing Subsequence = {[1, 8],[2,3,9],[5,9]}</li>
</ul>
<h2 id="longest-common-subsequence-lcs">Longest Common Subsequence (LCS)</h2>
<h2 id="knapsack">Knapsack</h2>
<h2 id="chain-matrix-multiply">Chain Matrix Multiply</h2>
<h2 id="shortest-path-algorithms">Shortest Path Algorithms</h2>
]]></content>
      <categories>
        <category>Algorithms</category>
        <category>Dynamic Programming</category>
      </categories>
      <tags>
        <tag>Algorithms</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>抗击 kdevtmpfs 挖矿病毒篇</title>
    <url>/2020/09/10/fight-with-kdevtmpfs-virus/</url>
    <content><![CDATA[<p><img src=2020/09/10/fight-with-kdevtmpfs-virus/virus.jpeg style="width:85%;"/></p>
<!-- ![virus](2020/09/10/fight-with-kdevtmpfs-virus/virus.jpeg) -->
<p>Kdevtmpfs 是一个偷偷运行在服务器上，占用服务器资源进行挖矿的病毒。我有幸遭中了一次，本篇记录了我与它斗智斗勇的过程...</p>
<span id="more"></span>
<p>系统环境：Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-186-generic x86_64) ### 病毒行为： - 占用 90+ CPU使用率进行挖矿 - 偷偷设置定时任务（crontab -l） - 通过一俄罗斯服务器（93.189.43.3）偷偷下载脚本 - 守护进程 kinsing 存在 /var/tmp - 挖矿进程 kdevtmpfsi 存在 /tmp - 有个进程名为 kdevtmpfs 的主进程是系统的 kthreadd，重启后还存在 (这个貌似不是病毒，因为我运行另一台正常服务器也有此进程，应该是病毒模仿此进程的名字)</p>
<h3 id="解决方法">解决方法：</h3>
<ol type="1">
<li>删除守护进程 $ sudo rm /var/tmp/kinsing</li>
<li>删除挖矿进程 $ sudo rm /tmp/kdevtmpfsi</li>
<li>清空定时任务 “<span class="math inline">\(crontab -e”， “\)</span>sudo crontab -e”，这两个都看一下，分别对应当前用户和系统用户。</li>
<li>Kill kinsing 和 kdevtmpfsi 进程。</li>
<li>把 195.3.146.118; 45.67.230.68; 93.189.43.3 加入黑名单</li>
<li>Redis &amp; Scrapyd 安全配置</li>
</ol>
<h3 id="相关文章">相关文章：</h3>
<ol type="1">
<li>服务器遭 kdevtmpfsi挖矿程序入侵的分析与解决 http://www.shareyuanma.com/source/article/newarticle/5054.html</li>
<li>Linux 开机(脚本)启动顺序 https://www.jianshu.com/p/e1442913eb0e</li>
<li>Redis 安全配置 https://help.aliyun.com/knowledge_detail/37447.html?spm=a2c4g.11186631.2.2.828c1848kuRv6p</li>
<li>利用Redis写入SSH公钥获取服务器登陆权限 http://lichengxiao.cn/17.html</li>
<li>处理 kdevtmpfsi 挖矿病毒 https://blog.csdn.net/amaxiaochen/article/details/103742982</li>
</ol>
<hr />
<p>2020/7/28 发现病毒行为并进行排查。 通过 iftop 发现服务器长时间和 93.189.43.3 有着低速率的数据传输，应该是在偷偷下载脚本。 通过 “netstat -atp” 发现 93.189.43.3 对应的 PID 是 wget。</p>
<figure>
<img src="1.jpg" alt="1" /><figcaption aria-hidden="true">1</figcaption>
</figure>
<p>结合之前发现病毒偷偷设置的定时任务，确定了其中的联系。</p>
<figure>
<img src="2.jpg" alt="2" /><figcaption aria-hidden="true">2</figcaption>
</figure>
<p>守护进程运行中，ip 也对上了。</p>
<figure>
<img src="3.jpg" alt="3" /><figcaption aria-hidden="true">3</figcaption>
</figure>
<p>根据[1]的描述是redis被入侵了，但我未证实。 删除 kinsing，kdevtmpfs 并清空 crontab 后过一段时间定时任务（crontab）还是会自动被写入，猜测被植入了后门或是脚本文件未清除干净。执行了解决方法1~4后，暂无复发情况，先观察两天再说。 2020/8/1 今天病毒又出现了，所属从用户变成了root，由内核进程 /sbin/init 创建（ppid = 1）。 查看了 /etc/init.d/rc 启动脚本文件并没有发现病毒自启代码。</p>
<p>2020/8/6 参考[3][4]，发现了用户目录下/.ssh/known_hosts文件里存在陌生公钥，删除之并加固redis安全策略。但好像还是不起作用，病毒还能通过某种方式，自动添加定时任务，向195.3.146.118 下载病毒脚本，然后向 45.67.230.68 下载 kinsing。</p>
<figure>
<img src="4.jpg" alt="4" /><figcaption aria-hidden="true">4</figcaption>
</figure>
<p>无奈只能终极解决办法，封禁相关IP（195.3.146.118; 45.67.230.68; 93.189.43.3）</p>
<p>2020/8/11 找到了入侵入口— scrapyd 服务器 原因：scrapyd 的 api 开放后，任何人都可以上传任何 python 代码并且通过 scrapyd 让其在服务器运行，并且 scrapyd 的权限是 root 。现认为，攻击者通过此方式下载并执行挖矿病毒。但除此之外的攻击者做没做其他事情，暂且未知。 线索：通过 ps aux 查看到病毒进程 kingdevfsi 和 kingsing 通过 systemctl … status 查看到这两个进程关联到scrapyd进程 并且上面图中的 wget 进程也同样关联到 scrapyd 进程，遂认为 scrapyd 有很大嫌疑。 方案：关闭scrapyd服务，清除本地病毒。</p>
]]></content>
      <categories>
        <category>服务器运维</category>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>Security</tag>
        <tag>Virus</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Mac 上监听局域网中的数据包</title>
    <url>/2021/05/17/capture-packages-with-mac/</url>
    <content><![CDATA[<p>许多Mac OS X用户对Mac缺乏复杂的网络分析工具感到遗憾，这些工具在Linux系统上普遍存在。许多人不知道的是Mac OS X附带了一个内置的命令行工具，可以对Wi-Fi网络进行各种的操作，从数据包捕获（流量监听）到扫描附近网络的信噪比。Airport是Apple <code>IEEE 802.11</code>专用框架的一部分，该框架用于为Mac的Airport菜单栏图标提供动力。 <span id="more"></span></p>
<h2 id="环境">环境</h2>
<p>实验环境：macOS Big Sur (Version 11.2.3)<br />
工具：Wireshark + AirPort Utility</p>
<h3 id="airport">AirPort:</h3>
<p>许多Mac OS X用户对Mac缺乏复杂的网络分析工具感到遗憾，这些工具在Linux系统上普遍存在。许多人不知道的是Mac OS X附带了一个内置的命令行工具，可以对Wi-Fi网络进行各种的操作，从数据包捕获（流量监听）到扫描附近网络的信噪比。Airport是Apple 80211专用框架的一部分，该框架用于为Mac的Airport菜单栏图标提供动力。</p>
<h2 id="安装-wireshark">1. 安装 Wireshark</h2>
<p>（略） ## 2. 查看需要监听的信号频道 查看2.4GHz或5GHz的信道(channel)和宽度(频宽) <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;airport -s</span><br></pre></td></tr></table></figure> Example:</p>
<figure>
<img src="channel.png" alt="channel" /><figcaption aria-hidden="true">channel</figcaption>
</figure>
<h2 id="选择频道进行监听">2. 选择频道进行监听</h2>
<p>比如使用en0网卡监听频道6: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo .&#x2F;airport en0 sniff 6</span><br></pre></td></tr></table></figure> 如果命令行找不到airport命令，执行下面这段代码配置软链接，或者进入airport目录操作。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ln -s &#x2F;System&#x2F;Library&#x2F;PrivateFrameworks&#x2F;Apple80211.framework&#x2F;Versions&#x2F;Current&#x2F;Resources&#x2F;airport &#x2F;usr&#x2F;sbin&#x2F;airport</span><br></pre></td></tr></table></figure> 监听结束后默认会在<code>/tmp</code>生成<code>.cap</code>数据包。</p>
<p><img src="cap.png" alt="cap" /> ## 3. 使用Wireshark打开数据包 <img src="result.png" alt="result" /></p>
<p>最后，使用Wireshark打开数据包，开始尽情分析数据吧~</p>
<p>这篇文章介绍了如何解析802.11协议包-&gt;<a href="https://gitlab.com/wireshark/wireshark/-/wikis/HowToDecrypt802.11">How to Decrypt 802.11</a></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/08/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Microservice Solutions 微服务解决方案</title>
    <url>/2021/04/22/microservice_solutions/</url>
    <content><![CDATA[<!-- <img src=2021/04/22/microservice_solutions/CDprocess.png style="width:70%;"/> -->
<span id="more"></span>
<h2 id="background">Background</h2>
<figure>
<img src="CDprocess.png" alt="微服务CD(持续交付/部署)流程" /><figcaption aria-hidden="true">微服务CD(持续交付/部署)流程</figcaption>
</figure>
<h2 id="technology-selection">Technology Selection</h2>
<p>Tech-stack: Kubernetes + Spring Cloud + Docker<br />
<strong>Spring Cloud</strong>:<br />
<strong>Docker</strong>:</p>
<h2 id="spring-cloud-project-demo">Spring Cloud Project Demo:</h2>
<p>For a better understanding of the Microservice architechture, I build a minimum demo project and for others to refer:</p>
<blockquote>
<p><a href="https://github.com/Jerriodaddy/Spring-Cloud-Demo/tree/main">Jerriodaddy / Spring-Cloud-Demo</a></p>
</blockquote>
<p>At the same time, I recommend a more compeleted e-mall demo:</p>
<blockquote>
<p><a href="https://github.com/macrozheng/mall-swarm">macrozheng / mall-swarm</a></p>
</blockquote>
<h2 id="reference-relative-reading">Reference &amp; Relative Reading</h2>
<ol type="1">
<li><p><a href="https://dzone.com/articles/microservice-architecture-with-spring-cloud-and-do">Microservice Architectures With Spring Cloud and Docker</a></p></li>
<li><p><a href="https://spring.io/cloud">Spring Cloud</a></p></li>
<li><p><a href="https://spring.io/blog/2019/06/18/getting-started-with-spring-cloud-gateway">Getting Started with Spring Cloud Gateway</a></p></li>
<li><p><a href="https://spring.io/guides/gs/spring-cloud-loadbalancer/">Client-Side Load-Balancing with Spring Cloud LoadBalancer</a></p></li>
<li><p><a href="http://www.heartthinkdo.com/?p=1933">Spring Cloud服务注册-Eureka介绍和部署</a></p></li>
<li><p><a href="https://spring.io/guides/gs/centralized-configuration/">Centralized Configuration</a></p></li>
<li><p><a href="https://cloud.spring.io/spring-cloud-config/multi/multi__spring_cloud_config_server.html">Spring Cloud Config Server</a></p></li>
<li><p><a href="https://www.jianshu.com/p/2571f6a4e192">微服务架构下的统一身份认证和授权</a></p></li>
</ol>
]]></content>
      <categories>
        <category>System Architecture</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql ERROR When Starting!</title>
    <url>/2020/03/11/mysql_start_error/</url>
    <content><![CDATA[<p><strong>错误关键句</strong>： 1. .dyld: Library not loaded: /usr/local/opt/openssl/lib/libssl.1.0.0.dylib 2. ERROR! The server quit without updating PID file</p>
<p><strong>解决办法简述</strong> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew upgrade </span><br></pre></td></tr></table></figure> <span id="more"></span></p>
<p><strong>错误关键句</strong>： 1. .dyld: Library not loaded: /usr/local/opt/openssl/lib/libssl.1.0.0.dylib 2. ERROR! The server quit without updating PID file</p>
<p><strong>解决办法简述</strong> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew upgrade </span><br></pre></td></tr></table></figure></p>
<p><strong>详细错误提示</strong> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dyld: Library not loaded: &#x2F;usr&#x2F;local&#x2F;opt&#x2F;openssl&#x2F;lib&#x2F;libssl.1.0.0.dylib</span><br><span class="line">  Referenced from: &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql@5.7&#x2F;5.7.24&#x2F;bin&#x2F;my_print_defaults</span><br><span class="line">  Reason: image not found</span><br><span class="line">Starting MySQL</span><br><span class="line">.dyld: Library not loaded: &#x2F;usr&#x2F;local&#x2F;opt&#x2F;openssl&#x2F;lib&#x2F;libssl.1.0.0.dylib</span><br><span class="line">  Referenced from: &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql@5.7&#x2F;5.7.24&#x2F;bin&#x2F;my_print_defaults</span><br><span class="line">  Reason: image not found</span><br><span class="line">dyld: Library not loaded: &#x2F;usr&#x2F;local&#x2F;opt&#x2F;openssl&#x2F;lib&#x2F;libssl.1.0.0.dylib</span><br><span class="line">  Referenced from: &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql@5.7&#x2F;5.7.24&#x2F;bin&#x2F;my_print_defaults</span><br><span class="line">  Reason: image not found</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql@5.7&#x2F;5.7.24&#x2F;bin&#x2F;mysqld_safe: line 198:  2483 Abort trap: 6           nohup &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql\@5.7&#x2F;5.7.24&#x2F;bin&#x2F;mysqld --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql\@5.7&#x2F;5.7.24 --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql --plugin-dir&#x3D;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql\@5.7&#x2F;5.7.24&#x2F;lib&#x2F;plugin --user&#x3D;mysql --log-error&#x3D;zhiruis-MacBook-Pro.local.err --pid-file&#x3D;&#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql&#x2F;zhiruis-MacBook-Pro.local.pid &lt; &#x2F;dev&#x2F;null &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line"> ERROR! The server quit without updating PID file (&#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql&#x2F;zhiruis-MacBook-Pro.local.pid).</span><br></pre></td></tr></table></figure> ------- ## 过程:</p>
<p><strong>背景介绍</strong>（一些废话） 今天想 dump 数据库的时候突然报了无法找到 mysql 的对应版本号的错误，我非常的奇怪，因为之前用的都好好的。本着重启解决一切的原则，我重启了 mysql 服务和电脑，结果报了如上的错误。重启无果，我决定面对现实来解决这个突如其来的问题。</p>
<p><strong>排查逻辑</strong> 1. 先重启再说。（上文） 2. 科学上网 + CSND。参考了几篇前辈的文章：https://blog.csdn.net/super_man_ww/article/details/51460572<br />
https://blog.csdn.net/abs1004/article/details/84839894 虽然说报错很像，但其根本原因与我相差甚远，但他们为我提供了很棒的解决思路（就是别想着靠别人，仔细研究报错提示来解决问题。） 3. 可能性思考。结合报错信息（"ssl library not found"）我回顾了近期操作是否影响了 mysql 和 ssl 的相关配置。最后定位到我昨天因为 python package 的依赖需要，升级了 openssl 版本。根据这一信息，我开始尝试解决。↓</p>
<p><strong>具体步骤</strong> 1. 我根据路径 /usr/local/opt/openssl/lib/ 查看引起报错的源文件。果不其然，其同名文件版本为1.1，而不是1.0。不同的文件名导致 mysql 无法找到该文件。<img src="https://img-blog.csdnimg.cn/20200310170004396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODM1NDk2,size_16,color_FFFFFF,t_70" alt="图片1" /> 2. 参考 https://stackoverflow.com/questions/59006602/dyld-library-not-loaded-usr-local-opt-openssl-lib-libssl-1-0-0-dylib 后，我发现是 mac 系统动态库的问题。通过输出 mysql 5.7.24 所依赖的动态链接库，显示 mysql 5.7.24 与 libssl.1.0.0 版本兼容（而我昨天升到了 1.1）。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ otool -L &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql@5.7&#x2F;5.7.24&#x2F;lib&#x2F;libmysqlclient.dylib</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql@5.7&#x2F;5.7.24&#x2F;lib&#x2F;libmysqlclient.dylib:</span><br><span class="line">	&#x2F;usr&#x2F;local&#x2F;opt&#x2F;mysql@5.7&#x2F;lib&#x2F;libmysqlclient.20.dylib (compatibility version 20.0.0, current version 20.0.0)</span><br><span class="line">	&#x2F;usr&#x2F;local&#x2F;opt&#x2F;openssl&#x2F;lib&#x2F;libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)</span><br><span class="line">	&#x2F;usr&#x2F;local&#x2F;opt&#x2F;openssl&#x2F;lib&#x2F;libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)</span><br><span class="line">	&#x2F;usr&#x2F;lib&#x2F;libc++.1.dylib (compatibility version 1.0.0, current version 400.9.4)</span><br><span class="line">	&#x2F;usr&#x2F;lib&#x2F;libSystem.B.dylib (compatibility version 1.0.0, current version 1252.200.5)</span><br></pre></td></tr></table></figure> 3. 所以假设的解决方法有两种： 1. 回退 libssl 版本到 1.0.0 。 2. 升级 mysql 到更新的版本看是否兼容 libssl 1.1 4. 我更倾向于后者，于是... "brew upgrade" 开始进入漫长的更新过程。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew upgrade </span><br></pre></td></tr></table></figure> 5. N 小时过后，我成功的再次登陆 mysql。感动！ <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> $ mysql.server start</span><br><span class="line">Starting MySQL</span><br><span class="line">.. SUCCESS!</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title>Shrio VS Spring Security [转]</title>
    <url>/2021/06/23/shrio-spring-security/</url>
    <content><![CDATA[<p>Security is a primary concern in the world of application development, especially in the area of enterprise web and mobile applications.</p>
<p>In this quick tutorial, <strong>we'll compare two popular Java Security frameworks – <a href="https://shiro.apache.org/">Apache Shiro</a> and <a href="https://spring.io/projects/spring-security">Spring Security</a>.</strong> <span id="more"></span> ## A Little Background Apache Shiro was born in 2004 as JSecurity and was accepted by the Apache Foundation in 2008. To date, it has seen many releases, the latest as of writing this is 1.5.3.</p>
<p>Spring Security started as Acegi in 2003 and was incorporated into the Spring Framework with its first public release in 2008. Since its inception, it has gone through several iterations and the current GA version as of writing this is 5.3.2.</p>
<p>Both technologies offer <strong>authentication and authorization support along with cryptography and session management solutions</strong>. Additionally, Spring Security provides first-class protection against attacks such as CSRF and session fixation.</p>
<p>In the next few sections, we'll see examples of how the two technologies handle authentication and authorization. To keep things simple, we'll be using basic Spring Boot based MVC applications with FreeMarker templates.</p>
<h2 id="configuring-apache-shiro">Configuring Apache Shiro</h2>
<p>To start with, let's see how configurations differ between the two frameworks.</p>
<h3 id="maven-dependencies">Maven Dependencies</h3>
<p>Since we'll use Shiro in a Spring Boot App, we'll need its starter and the shiro-core module: <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring-boot-web-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure> The latest versions can be found on Maven Central.</p>
<h3 id="creating-a-realm">Creating a Realm</h3>
<p>To declare users with their roles and permissions in-memory, we need to create a realm extending Shiro's JdbcRealm. We'll define two users – Tom and Jerry, with roles USER and ADMIN, respectively: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">JdbcRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; credentials = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Set&gt; roles = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Set&gt; permissions = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        credentials.put(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">        credentials.put(<span class="string">&quot;Jerry&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        roles.put(<span class="string">&quot;Jerry&quot;</span>, <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">&quot;ADMIN&quot;</span>)));</span><br><span class="line">        roles.put(<span class="string">&quot;Tom&quot;</span>, <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">&quot;USER&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        permissions.put(<span class="string">&quot;ADMIN&quot;</span>, <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">&quot;READ&quot;</span>, <span class="string">&quot;WRITE&quot;</span>)));</span><br><span class="line">        permissions.put(<span class="string">&quot;USER&quot;</span>, <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">&quot;READ&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> Next, to enable retrieval of this authentication and authorization, we need to override a few methods: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> </span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userToken.getUsername() == <span class="keyword">null</span> || userToken.getUsername().isEmpty() ||</span><br><span class="line">      !credentials.containsKey(userToken.getUsername())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">&quot;User doesn&#x27;t exist&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(userToken.getUsername(), </span><br><span class="line">      credentials.get(userToken.getUsername()), getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">    Set roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Set permissions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Object user : principals) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            roles.addAll(getRoleNamesForUser(<span class="keyword">null</span>, (String) user));</span><br><span class="line">            permissions.addAll(getPermissions(<span class="keyword">null</span>, <span class="keyword">null</span>, roles));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SimpleAuthorizationInfo authInfo = <span class="keyword">new</span> SimpleAuthorizationInfo(roles);</span><br><span class="line">    authInfo.setStringPermissions(permissions);</span><br><span class="line">    <span class="keyword">return</span> authInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> The method <em>doGetAuthorizationInfo</em> is using a couple of helper methods to get the user's roles and permissions: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Set <span class="title">getRoleNamesForUser</span><span class="params">(Connection conn, String username)</span> </span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!roles.containsKey(username)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">&quot;User doesn&#x27;t exist&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> roles.get(username);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Set <span class="title">getPermissions</span><span class="params">(Connection conn, String username, Collection roles)</span> </span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    Set userPermissions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String role : roles) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!permissions.containsKey(role)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">&quot;Role doesn&#x27;t exist&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        userPermissions.addAll(permissions.get(role));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userPermissions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> Next, we need to include this <em>CustomRealm</em> as a bean in our Boot Application:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Realm <span class="title">customRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CustomRealm();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Additionally, to configure authentication for our endpoints, we need another bean:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultShiroFilterChainDefinition filter = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line"></span><br><span class="line">    filter.addPathDefinition(<span class="string">&quot;/home&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">    filter.addPathDefinition(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here, using a <em>DefaultShiroFilterChainDefinition</em> instance, we specified that our <em>/home</em> endpoint can only be accessed by authenticated users.</p>
<p>That's all we need for the configuration, Shiro does the rest for us.</p>
<h2 id="configuring-spring-security">Configuring Spring Security</h2>
<p>Now let's see how to achieve the same in Spring.</p>
<h3 id="maven-dependencies-1">Maven Dependencies</h3>
<p>First, the dependencies: <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure> The latest versions can be found on <a href="https://search.maven.org/classic/#search%7Cga%7C1%7Cg%3A%22org.springframework.boot%22%20AND%20a%3A%22spring-boot-starter%22">Maven Central</a>.</p>
<h3 id="configuration-class">Configuration Class</h3>
<p>Next, we'll define our Spring Security configuration in a class <em>SecurityConfig</em>, extending <em>WebSecurityConfigurerAdapter</em>: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">          .authorizeRequests(authorize -&gt; authorize</span><br><span class="line">            .antMatchers(<span class="string">&quot;/index&quot;</span>, <span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/home&quot;</span>, <span class="string">&quot;/logout&quot;</span>).authenticated()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>))</span><br><span class="line">          .formLogin(formLogin -&gt; formLogin</span><br><span class="line">            .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .failureUrl(<span class="string">&quot;/login-error&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">          .withUser(<span class="string">&quot;Jerry&quot;</span>)</span><br><span class="line">            .password(passwordEncoder().encode(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">            .authorities(<span class="string">&quot;READ&quot;</span>, <span class="string">&quot;WRITE&quot;</span>)</span><br><span class="line">            .roles(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">          .withUser(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">            .password(passwordEncoder().encode(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">            .authorities(<span class="string">&quot;READ&quot;</span>)</span><br><span class="line">            .roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> As we can see, we built an <em>AuthenticationManagerBuilder</em> object to declare our users with their roles and authorities. Additionally, we encoded the passwords using a <em>BCryptPasswordEncoder</em>.</p>
<p>Spring Security also provides us with its <em>HttpSecurity</em> object for further configurations. For our example, we've allowed: - everyone to access our <em>index</em> and <em>login</em> pages - only authenticated users to enter the <em>home</em> page and <em>logout</em> - only users with ADMIN role to access the <em>admin</em> pages</p>
<p>We've also defined support for form-based authentication to send users to the <em>login</em> endpoint. In case login fails, our users will be redirected to <em>/login-error.</em></p>
<h2 id="controllers-and-endpoints">Controllers and Endpoints</h2>
<p>Now let's have a look at our web controller mappings for the two applications. While they'll use the same endpoints, some implementations will differ.</p>
<h3 id="endpoints-for-view-rendering">Endpoints for View Rendering</h3>
<p>For endpoints rendering the view, the implementations are the same: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showLoginPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/home&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMeHome</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    addUserAttributes(model);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> Both our controller implementations, Shiro as well as Spring Security, return the <em>index.ftl</em> on the root endpoint, <em>login.ftl</em> on the login endpoint, and <em>home.ftl</em> on the home endpoint.</p>
<p>However, the definition of the method <em>addUserAttributes</em> at the <em>/home</em> endpoint will differ between the two controllers. This method introspects the currently logged in user's attributes.</p>
<p>Shiro provides a <em>SecurityUtils.getSubject</em> to retrieve the current <em>Subject</em>, and its roles and permissions: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addUserAttributes</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">    String permission = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;ADMIN&quot;</span>)) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;USER&quot;</span>)) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;USER&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;READ&quot;</span>)) &#123;</span><br><span class="line">        permission = permission + <span class="string">&quot; READ&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;WRITE&quot;</span>)) &#123;</span><br><span class="line">        permission = permission + <span class="string">&quot; WRITE&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;username&quot;</span>, currentUser.getPrincipal());</span><br><span class="line">    model.addAttribute(<span class="string">&quot;permission&quot;</span>, permission);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> On the other hand, Spring Security provides an <em>Authentication</em> object from its <em>SecurityContextHolder‘s</em> context for this purpose:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addUserAttributes</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    Authentication auth = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    <span class="keyword">if</span> (auth != <span class="keyword">null</span> &amp;&amp; !auth.getClass().equals(AnonymousAuthenticationToken.class)) &#123;</span><br><span class="line">        User user = (User) auth.getPrincipal();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;username&quot;</span>, user.getUsername());</span><br><span class="line">        Collection&lt;GrantedAuthority&gt; authorities = user.getAuthorities();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">            <span class="keyword">if</span> (authority.getAuthority().contains(<span class="string">&quot;USER&quot;</span>)) &#123;</span><br><span class="line">                model.addAttribute(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;USER&quot;</span>);</span><br><span class="line">                model.addAttribute(<span class="string">&quot;permissions&quot;</span>, <span class="string">&quot;READ&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (authority.getAuthority().contains(<span class="string">&quot;ADMIN&quot;</span>)) &#123;</span><br><span class="line">                model.addAttribute(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">                model.addAttribute(<span class="string">&quot;permissions&quot;</span>, <span class="string">&quot;READ WRITE&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="post-login-endpoint">POST Login Endpoint</h3>
<p>In Shiro, we map the credentials the user enters to a POJO: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCredentials</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> Then we'll create a <em>UsernamePasswordToken</em> to log the user, or <em>Subject</em>, in: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(HttpServletRequest req, UserCredentials credentials, RedirectAttributes attr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">if</span> (!subject.isAuthenticated()) &#123;</span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(credentials.getUsername(),</span><br><span class="line">          credentials.getPassword());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">            logger.error(ae.getMessage());</span><br><span class="line">            attr.addFlashAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;Invalid Credentials&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> On the Spring Security side, this is just a matter of redirection to the home page. Spring's logging-in process, handled by its <em>UsernamePasswordAuthenticationFilter</em>, is transparent to us: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="admin-only-endpoint">Admin-Only Endpoint</h3>
<p>Now let's look at a scenario where we have to perform role-based access. Let's say we have an <em>/admin</em> endpoint, access to which should only be allowed for the ADMIN role.</p>
<p>Let's see how to do this in Shiro: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">adminOnly</span><span class="params">(ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">    addUserAttributes(modelMap);</span><br><span class="line">    Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;ADMIN&quot;</span>)) &#123;</span><br><span class="line">        modelMap.addAttribute(<span class="string">&quot;adminContent&quot;</span>, <span class="string">&quot;only admin can view this&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> Here we extracted the currently logged in user, checked if they have the ADMIN role, and added content accordingly.</p>
<p>In Spring Security, there is no need for checking the role programmatically, we've already defined who can reach this endpoint in our <em>SecurityConfig</em>. So now, it's just a matter of adding business logic: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">adminOnly</span><span class="params">(HttpServletRequest req, Model model)</span> </span>&#123;</span><br><span class="line">    addUserAttributes(model);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;adminContent&quot;</span>, <span class="string">&quot;only admin can view this&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="logout-endpoint">Logout Endpoint</h3>
<p>Finally, let's implement the logout endpoint.</p>
<p>In Shiro, we'll simply call <em>Subject.logout</em>: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    subject.logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> For Spring, we've not defined any mapping for logout. In this case, its default logout mechanism kicks in, which is automatically applied since we extended <em>WebSecurityConfigurerAdapter</em> in our configuration.</p>
<h2 id="apache-shiro-vs-spring-security">Apache Shiro vs Spring Security</h2>
<p>Now that we've looked at the implementation differences, let's look at a few other aspects.</p>
<p>In terms of community support, the <strong>Spring Framework in general has a huge community of developers</strong>, actively involved in its development and usage. Since Spring Security is part of the umbrella, it must enjoy the same advantages. Shiro, though popular, does not have such humongous support.</p>
<p>Concerning documentation, Spring again is the winner.</p>
<p>However, there's a bit of a learning curve associated with Spring Security. <strong>Shiro, on the other hand, is easy to understand</strong>. For desktop applications, configuration via <a href="https://shiro.apache.org/configuration.html#Configuration-CreatingaSecurityManagerfromINI">shiro.ini</a> is all the easier.</p>
<p>But again, as we saw in our example snippets, <strong>Spring Security does a great job of keeping business logic and security separate</strong> and truly offers security as a cross-cutting concern.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this tutorial, <strong>we compared Apache Shiro with Spring Security</strong>.</p>
<p>We've just grazed the surface of what these frameworks have to offer and there is a lot to explore further. There are quite a few alternatives out there such as <a href="https://docs.oracle.com/en/java/javase/11/security/java-authentication-and-authorization-service-jaas-reference-guide.html#GUID-2A935F5E-0803-411D-B6BC-F8C64D01A25C">JAAS</a> and <a href="http://oaccframework.org/">OACC</a>. Still, with its advantages, <a href="https://www.baeldung.com/security-spring">Spring Security</a> seems to be winning at this point.</p>
<p>As always, source code is available <a href="https://github.com/eugenp/tutorials/tree/master/apache-shiro">over on GitHub</a>.</p>
<hr />
<p>[转自][Spring Security vs Apache Shiro](https://www.baeldung.com/spring-security-vs-apache-shiro) Author: Sampada Wagde Access date: Jun 23, 2021</p>
]]></content>
      <categories>
        <category>System Architecture</category>
      </categories>
      <tags>
        <tag>Security</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot Series - Mybatis Generator (最简配置！)</title>
    <url>/2021/05/09/springboot-mybatis-generator/</url>
    <content><![CDATA[<p>Mybatis要写许多xml文件，sql语句，DAO接口，但大部分都是通用的增删改查操作。为了解决这个问题，Mybatis Generator插件应运而生，能够通过数据库表自动生成三个文件： 1. DAO接口 2. 表对应的实体类 3. mapper.xml文件 <span id="more"></span></p>
<p>网上有很多类似的文章介绍了如何在Springboot中使用MybatisGenerator，但是大部分教程里有很多冗余的配置，今天给大家来纯净版，只保留所需要的配置使用MybatisGenerator工具。</p>
<p>Mybatis要写许多xml文件，sql语句，DAO接口，但大部分都是通用的增删改查操作。为了解决这个问题，Mybatis Generator插件应运而生，能够通过数据库表自动生成三个文件： 1. DAO接口 2. 表对应的实体类 3. mapper.xml文件</p>
<p>整体文件结构示例： <img src="filestruc.png" alt="filestruc" /></p>
<p>具体步骤如下： ## 1. 创建数据库表 Demo项目文件里提供了创建数据库的sql脚本，在MySQLWorkbench里运行一下就好了。</p>
<h2 id="在pom.xml里添加依赖">2. 在pom.xml里添加依赖</h2>
<p>依赖主要有三个，代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;11&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;tk-mapper.version&gt;1.2.4&lt;&#x2F;tk-mapper.version&gt;</span><br><span class="line">    &lt;mybatis-generator.version&gt;1.3.7&lt;&#x2F;mybatis-generator.version&gt;</span><br><span class="line">    &lt;mysql-connector.version&gt;8.0.22&lt;&#x2F;mysql-connector.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;tk.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mapper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;tk-mapper.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- mybatis 逆向生成工具 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-generator-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mybatis-generator.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- mysql 连接 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mysql-connector.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--tk.mapper --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;tk.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mapper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!-- mybatis 逆向生成工具 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-generator-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure> 其中 <code>tk.mybatis</code> 是用来简化 Mapper 里冗余代码的插件。原生 Mybatis Generator 的 mapper.xml 中增删改查，按条件搜索等冗余sql代码太多了，每个 mapper 大概有几百行，所以我多引了一个这个包，可以大大减少代码量，减小包的体积。</p>
<p>下图是原生（左）和<code>tk.mybatis</code>（右）生成的 mapper.xml 对比: <img src="compare.png" alt="compare" /></p>
<p>使用这个包需要添加一个接口类： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.jerrio.utils;</span><br><span class="line"></span><br><span class="line">import tk.mybatis.mapper.common.Mapper;</span><br><span class="line">import tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line"></span><br><span class="line">public interface MyMapper&lt;T&gt; extends Mapper&lt;T&gt;, MySqlMapper&lt;T&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;FIXME 特别注意，该接口不能被扫描到，否则会出错</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 并在<code>generator.xml</code>中添加/替换mapper生成插件（完整<code>generator.xml</code>下面会有展示）： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugin type&#x3D;&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;mappers&quot; value&#x3D;&quot;com.jerrio.utils.MyMapper&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="添加generator.xml">3. 添加generator.xml</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;properties resource&#x3D;&quot;generator.properties&quot;&#x2F;&gt;</span><br><span class="line">    &lt;context id&#x3D;&quot;MysqlContext&quot; targetRuntime&#x3D;&quot;MyBatis3Simple&quot; defaultModelType&#x3D;&quot;flat&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;beginningDelimiter&quot; value&#x3D;&quot;&#96;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;endingDelimiter&quot; value&#x3D;&quot;&#96;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;autoDelimitKeywords&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;javaFileEncoding&quot; value&#x3D;&quot;UTF-8&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        &lt;!&amp;ndash; 为模型生成序列化方法&amp;ndash;&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;plugin type&#x3D;&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;&#x2F;&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;!&amp;ndash; 为生成的Java模型创建一个toString方法 &amp;ndash;&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;plugin type&#x3D;&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;&#x2F;&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;!&amp;ndash;生成mapper.xml时覆盖原文件&amp;ndash;&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;plugin type&#x3D;&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot; &#x2F;&gt;--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 简化Mapper插件 --&gt;</span><br><span class="line">        &lt;plugin type&#x3D;&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;mappers&quot; value&#x3D;&quot;com.jerrio.utils.MyMapper&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line"></span><br><span class="line">        &lt;jdbcConnection driverClass&#x3D;&quot;$&#123;jdbc.driverClass&#125;&quot;</span><br><span class="line">                        connectionURL&#x3D;&quot;$&#123;jdbc.connectionURL&#125;&quot;</span><br><span class="line">                        userId&#x3D;&quot;$&#123;jdbc.userId&#125;&quot;</span><br><span class="line">                        password&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&gt;</span><br><span class="line">            &lt;!-- 解决mysql驱动升级到8.0后不生成指定数据库代码的问题，防止生成其他库同名表--&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;nullCatalogMeansCurrent&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;jdbcConnection&gt;</span><br><span class="line">        &lt;!-- 对应生成的pojo所在包 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage&#x3D;&quot;com.jerrio.pojo&quot; targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;&#x2F;&gt;</span><br><span class="line">		&lt;!-- 对应生成的mapper所在目录 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage&#x3D;&quot;mapper&quot; targetProject&#x3D;&quot;src&#x2F;main&#x2F;resources&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 配置mapper对应的java映射 --&gt;</span><br><span class="line">        &lt;javaClientGenerator targetPackage&#x3D;&quot;com.jerrio.mapper&quot; targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;</span><br><span class="line">                             type&#x3D;&quot;XMLMAPPER&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 生成全部表tableName设为% --&gt;</span><br><span class="line">        &lt;table tableName&#x3D;&quot;%&quot; delimitIdentifiers&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;generatedKey column&#x3D;&quot;id&quot; sqlStatement&#x3D;&quot;MySql&quot; identity&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">        &lt;!--        &lt;table tableName&#x3D;&quot;order&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--            &lt;generatedKey column&#x3D;&quot;id&quot; sqlStatement&#x3D;&quot;MySql&quot; identity&#x3D;&quot;true&quot;&#x2F;&gt;--&gt;</span><br><span class="line">        &lt;!--        &lt;&#x2F;table&gt;--&gt;</span><br><span class="line">    &lt;&#x2F;context&gt;</span><br><span class="line">&lt;&#x2F;generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>
<p>jdbcConnection那栏换成自己的配置就可以（我另写了个配置文件作引人），比如 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driverClass&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.connectionURL&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test</span><br><span class="line">jdbc.userId&#x3D;root</span><br><span class="line">jdbc.password&#x3D;root</span><br></pre></td></tr></table></figure> ## 4. 添加 GeneratorDisplay.java <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.jerrio;</span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line">import org.mybatis.generator.config.Configuration;</span><br><span class="line">import org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line">import org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class GeneratorDisplay &#123;</span><br><span class="line"></span><br><span class="line">	public void generator() throws Exception&#123;</span><br><span class="line">		&#x2F;&#x2F;MBG 执行过程中的警告信息</span><br><span class="line">		List&lt;String&gt; warnings &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">		&#x2F;&#x2F;当生成的代码重复时，覆盖原代码</span><br><span class="line">		boolean overwrite &#x3D; true;</span><br><span class="line">		&#x2F;&#x2F;读取我们的 MBG 配置文件</span><br><span class="line">		InputStream is &#x3D; GeneratorDisplay.class.getResourceAsStream(&quot;&#x2F;generator.xml&quot;);</span><br><span class="line">		ConfigurationParser cp &#x3D; new ConfigurationParser(warnings);</span><br><span class="line">		Configuration config &#x3D; cp.parseConfiguration(is);</span><br><span class="line">		is.close();</span><br><span class="line"></span><br><span class="line">		DefaultShellCallback callback &#x3D; new DefaultShellCallback(overwrite);</span><br><span class="line">		&#x2F;&#x2F;创建 MBG</span><br><span class="line">		MyBatisGenerator myBatisGenerator &#x3D; new MyBatisGenerator(config, callback, warnings);</span><br><span class="line">		&#x2F;&#x2F;执行生成代码</span><br><span class="line">		myBatisGenerator.generate(null);</span><br><span class="line">		&#x2F;&#x2F;输出警告信息</span><br><span class="line">		for (String warning : warnings) &#123;</span><br><span class="line">			System.out.println(warning);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	public static void main(String[] args) throws Exception &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			GeneratorDisplay generatorSqlmap &#x3D; new GeneratorDisplay();</span><br><span class="line">			generatorSqlmap.generator();</span><br><span class="line">			System.out.println(&quot;mapper 生产完毕，注意调整代码&quot;);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="执行编译">5. 执行编译</h2>
<p>按以上配置完成后就可以点GeneratorDisplay运行了，当你在控制台看到类似以下输出时，代表运行成功。</p>
<figure>
<img src="run.png" alt="run" /><figcaption aria-hidden="true">run</figcaption>
</figure>
<h3 id="为了大家调用方便我把代码放到github了可以直接下载放到项目目录中作为子模块运行jerriodaddymybatis-generator">为了大家调用方便，我把代码放到Github了，可以直接下载放到项目目录中作为子模块运行。<a href="https://github.com/Jerriodaddy/mybatis-generator">Jerriodaddy/mybatis-generator</a></h3>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Timestamp Transformation in Uniapp</title>
    <url>/2019/08/22/timestamp_transformation_in_uniapp/</url>
    <content><![CDATA[<p>当前项目聊天业务需要显示聊天消息的创建时间。在网上搜索一番之后，发现很多都是答非所问，所以决定自己探索一番，并记录下这个有趣的过程。</p>
<p><strong>业务流程</strong>： 1. 客户端发消息时，本地创建聊天对象加到缓存中并渲染给页面 2. 将聊天对象发送给服务器 3. 服务器将聊天对象转发给对方用户...</p>
<span id="more"></span>
<h2 id="记一次-uniapp-上的时间格式转换">记一次 uniapp 上的时间格式转换</h2>
<p><strong>背景</strong>：当前项目聊天业务需要显示聊天消息的创建时间。在网上搜索一番之后，发现很多都是答非所问，所以决定自己探索一番，并记录下这个有趣的过程。</p>
<p><strong>业务流程</strong>： 1. 客户端发消息时，本地创建聊天对象加到缓存中并渲染给页面 2. 将聊天对象发送给服务器 3. 服务器将聊天对象转发给对方用户</p>
<p>为了实现该功能，我先分别打印了来自 java 后端和 uni-app 获取时间方法的结果。发现他们的格式不一样，如图：</p>
<figure>
<img src="https://img-blog.csdnimg.cn/20190821231519466.png" alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption>
</figure>
<p>从后端拿到的是 java.util New Date() 之后的原始长整数（我称之为原始时间）， 而在 uni-app 里直接 new Date() 后，得到是一个经格式化后的长字符串。</p>
<p>我想，按理来说，考虑到客户端时区的差异，我们最好在客户端对原始时间进行解析。 而两个用户可能处在不同的时区，所以唯一的方法就是传递原始时间。</p>
<p>所以在uni-app如何获取未经过格式化的原始时间，已经如何解析呢？</p>
<p><img src="https://img-blog.csdnimg.cn/20190821235003442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODM1NDk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 可以看到这边 uni-app 其实给出了很多方法，其中 getTime() 可以获取一个 numeric universal time (我所指的原始时间)。也就是说我们储存和传输这个时间就可以了。 那么我们如何解析它呢？ 经过一段时间的尝试... 我直接提供简单的示范代码吧。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var time &#x3D; new Date().getTime() &#x2F;&#x2F; 获取原始时间</span><br><span class="line">&#x2F;&#x2F; 通过服务器接收后...</span><br><span class="line">var newTime &#x3D; new Date(time) &#x2F;&#x2F; 把接收到的时间转换为 Date 类型</span><br><span class="line">&#x2F;&#x2F; 其实这样就可以了 可以直接通过 Date 类型自带的 get 方法解析，比如：</span><br><span class="line">console.log(newTime.getDate());</span><br><span class="line">console.log(newTime.getDay());</span><br></pre></td></tr></table></figure>
<p>这是我 getDate() 之后的结果，这样就成功获取并解析到啦。</p>
<p><img src="https://img-blog.csdnimg.cn/20190822001210866.png" alt="在这里插入图片描述啊" /> <strong>END...</strong></p>
]]></content>
      <categories>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Url Parsing Error: 小程序页面跳转传参解析错误 —— Unexpected end of JSON input</title>
    <url>/2019/11/27/url_parsing_error/</url>
    <content><![CDATA[<figure>
<img src="https://img-blog.csdnimg.cn/20191127172333593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODM1NDk2,size_16,color_FFFFFF,t_70" alt="截图1" /><figcaption aria-hidden="true">截图1</figcaption>
</figure>
<p>在小程序 A-&gt;B 页面跳转时，B页面对A界面传入参数解析失败, 打印传参结果发现... <span id="more"></span></p>
<p>今天发现一个问题，记录一下。 在小程序 A-&gt;B 页面跳转时，B页面对A界面传入参数解析失败, 打印传参结果发现</p>
<figure>
<img src="https://img-blog.csdnimg.cn/20191127172333593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODM1NDk2,size_16,color_FFFFFF,t_70" alt="截图1" /><figcaption aria-hidden="true">截图1</figcaption>
</figure>
<p>数据在 faceImg 处被截断。 faceImg 原数据为 https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size... .jpeg(太长了我就截取了部分) 首先排除字符串过长溢出的情况（因为这段输出太短不至于溢出） 可以注意到字符串在 timg? 问号处被截断， 因此，判断出错原因是图片的url中的特殊字符“？”被识别导致错误的解析。 根据此原因对代码进行修改：</p>
<p>A页跳转原代码： <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">uni.navigateTo(&#123;</span><br><span class="line">	url: <span class="string">&quot;../chatpage/chatpage?friendInfo=&quot;</span> + <span class="built_in">JSON</span>.stringify(friendInfo),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> B页接收原代码： <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">onLoad</span>(<span class="params">opt</span>)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.friendInfo = <span class="built_in">JSON</span>.parse(opt.friendInfo); <span class="comment">//解码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 修改后代码： A页： <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> encodeData = <span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(friendInfo)); <span class="comment">// 对数据字符串化并转码，防止特殊字符影响传参</span></span><br><span class="line"><span class="comment">// console.log(decodeURIComponent(encodeData));</span></span><br><span class="line">uni.navigateTo(&#123;</span><br><span class="line">	url: <span class="string">&quot;../chatpage/chatpage?friendInfo=&quot;</span> + <span class="built_in">JSON</span>.stringify(friendInfo),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> B页： <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">onLoad</span>(<span class="params">opt</span>)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.friendInfo = <span class="built_in">JSON</span>.parse(<span class="built_in">decodeURIComponent</span>(opt.friendInfo)); <span class="comment">//解码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我在传参前使用 encodeURIComponent() 了对传输字符串做了转码，并在对应接收处解码。 修改过后，成功获取到正确参数。 转码后字符串如下图所示：</p>
<figure>
<img src="https://img-blog.csdnimg.cn/20191127180708629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODM1NDk2,size_16,color_FFFFFF,t_70" alt="转码后字符串" /><figcaption aria-hidden="true">转码后字符串</figcaption>
</figure>
<p>附上 encodeURI() 和 encodeURIComponent() 区别： https://blog.csdn.net/qq_34629352/article/details/78959707</p>
]]></content>
      <categories>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>Error</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
</search>
